Prototype is equivalent to parent

let x = {}

__proto__ is a deprecated parent under which all properties are present including constructor property which is referenced to a function which is used to create the object

every object directly or indirectly connected to Objectbase, objectbase don't have __proto__ or prototype, it's the base

Single instance of Objectbase all objects are referenced to it

Object.getPrototypeOf(x) === Object.getPrototypeOf(y) //true
x.__proto__ === y.__proto__ //true //should be used as it is deprecated

Javascript use prototypical inheritance to search for property up above the chain

myArray --> arrayBase --> Objectbase

let person = {name: "Saikat"};
let objectBase = Object.getPrototypeOf(person);
let descriptor = Object.getOwnPropertyDescriptor(objectBase, 'toString');
//{value: f, configurable: true, enumerable: false, writable: true}

Object.defineProperty(person, 'name', {
    writable: false, //person.name = "Sam" //will not change the value //default true
    enumerable: false, //Object.keys(person) //[] //default true
    configurable: false //delete person.name // ['name']
})


