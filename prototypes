Prototype is equivalent to parent

let x = {}

__proto__ is a deprecated parent under which all properties are present including constructor property which is referenced to a function which is used to create the object

every object directly or indirectly connected to Objectbase, objectbase don't have __proto__ or prototype, it's the base

Single instance of Objectbase all objects are referenced to it

Object.getPrototypeOf(x) === Object.getPrototypeOf(y) //true
x.__proto__ === y.__proto__ //true //should be used as it is deprecated

Javascript use prototypical inheritance to search for property up above the chain

myArray --> arrayBase --> Objectbase

let person = {name: "Saikat"};
let objectBase = Object.getPrototypeOf(person);
let descriptor = Object.getOwnPropertyDescriptor(objectBase, 'toString');
//{value: f, configurable: true, enumerable: false, writable: true}

Object.defineProperty(person, 'name', {
    writable: false, //person.name = "Sam" //will not change the value //default true
    enumerable: false, //Object.keys(person) //[] //default true
    configurable: false //delete person.name // ['name']
})

let obj = {};
obj.__proto__ = Object.prototype //prototype is a property inside object constructor

let arr = [];
arr.__proto__ = Array.prototype //prototype is a property inside object constructor

const c1 = new Circle(1);
const c2 = new Circle(1);

Circle.prototype === c1.__proto__

// Instance members

// Prototype members
Circle.prototype.draw = function(){}
//Circle{radius: 1, __proto__:draw:f()}

// Overidding the native property
Circle.prototype.toString = function(){
    return '';
}

//using this prototype property/methods can be called inside functions and vice-versa

Prototype properties are available everywhere as it's pass by referenced

Object.keys(c1); //returns instance members only
for(ley key in c1); //returns instance as well as prototype members
c1.hasOwnProperty('radius'); //true
c1.hasOwnProperty('draw'); //false

//Not a good practice to modify the built-in objects


var a = {
	kind: 'human'
}
var b = {};
b.__proto__ = animal;
a.isPrototypeOf(b) // true
a.kind = "tiger"
b.kind // "tiger" // look ups are dynamic // it creates it's own property of kind rather than looking up

var b = Object.create(a); // it creates a new empty object and assign a to its prototype
var b = Object.create(a, {food: {value: "mango"}}); b {food: "mango"}