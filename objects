//Factory Function
function createCircle(radius){
    return {
        radius,//ES6
        draw: function(){
            console.log('draw');
        }
    }
}
const circle = createCircle(1);
circle.draw();

//Constructor Function
function Circle(radius){
    console.log(this); //Circle{draw:f(),readius:1 __proto__}
    this.radius = radius;
    this.draw = function(){
        console.log('draw');
    }
}
const another = new Circle(1);//new creates an empty object {}
Remove new and then check it will give Window object fror browser and Global for node
3 steps
- create empty object
- this point to object
- return object

Circle.constructor
f Function(){} //Function constructor

every object has a property called "constructor" which is reference to the function which is used to create object

another.constructor
f Circle(radius){
    this.radius = radius;
    this.draw = function(){
        console.log('draw');
    }
}

function Person(firstName, lastName){
	this.firstName = firstName;
	this.lastName = lastName;
	this.fullName = function(){
		return this.firstName + ' ' + this.lastName;
	}
}
var per = new Person('John', 'Doe');
var per = {};
Person.call(per, 'John', 'Doe');

per.__proto__ = Person.Prototype // {} --> constructor and __proto
per.firstName = 'Kevin'; // even if we change the value of firstName but if it is used inside a function it will not change as it will hold the variable it passed that means 'John' as it creates closure and for that we have to remove 'this'

function Person(firstName, lastName){
	this.firstName = firstName;
	this.lastName = lastName;
	this.fullName = function(){
		return firstName + ' ' + lastName; // private
	}
}

circle.constructor
f Object(){} //object constructor function

let x = {} //let x = new Object();

Native buit-in constructor
new Object(); //{}
new String(); //'', "", ``
new Boolean(); //true, false
new Number(); //1, 2, 3

Functions are 0bjects

const Circle1 new Function('radius', `
    this.radius = radius;
    this.draw = function(){
        console.log('draw');
    }
`)

const circle = Circle1(1) //circle{radius: 1, draw: f()}

Circle.call({}, 1) //new Circle(1)
Circle.apply({}, [1, 2, 3]) //new Circle(1, 2, 3)

Function and Array are objects

Value Types/Primitive Types --- Reference Types
Number                          Object
String                          Function
Boolean                         Array
Symbol                          
undefined
null

primitive type are independent of each other
let x = 10;
let y = x;
x = 20;
//x = 20; y = 10;

let x = {value: 10};
let y = x;
x.value = 20;
//x = {value: 20}; y = {value: 20};

Primitives are copied by their value
Objects are copied by their reference

let number = 10;
function increase(number){
    number++;
} 
increase(number);
console.log(number);
//number = 10
//2 copies of number, number inside function is independent of the one outside of function

let obj = {value: 10};
function increase(obj){
    obj++;
} 
increase(obj);
console.log(obj);

Adding/Removing Properties

function Circle(radius){
    this.radius = radius;
    this.draw = function(){
        console.log('draw');
    }
}
const circle = new Circle(10);
circle.location = {x: 1};
//Circle{
    draw: f(),
    location: {x: 1},
    radius: 10
}

circle['location'] = {x: 1};
const propertyName = 'location';
const propertyName = 'location-location';
const propertyName = 'location location';
circle[propertyName] = {x: 1};

delete circle[propertyName];

Enumerating
for(let key in circle){
    console.log(key, circle[key];
}
//radius draw

const keys = Object.keys(circle); //Array of keys //['radius', 'draw']

if('radius' in circle) //to check the existense


Abstraction
//create private variables
function Circle(radius){
    let defaultLocation = {x: 0, y: 0}; //accessible only within the function scope
    let defaultFunc = function(radius){} //accessible only within the function scope 

    Object.defineProperty(this, 'defaultLocation', {
        get: function(){
            return defaultLocation;
        },
        set: function(value){
            if(!value.x || !value.y){
                throw new Error('Invalid Location');
                defaultLocation = value;
            }
        }
    })
}

circle.defaultLocation; //without bracket is a computed property
